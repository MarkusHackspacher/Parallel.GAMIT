# Generated by Django 5.0.4 on 2024-09-20 17:11

from django.db import migrations
from django.conf import settings
import psycopg2

def connect_to_db():
    conn = psycopg2.connect(
        f'dbname={settings.DATABASES["default"]["NAME"]} user={settings.DATABASES["default"]["USER"]} password={settings.DATABASES["default"]["PASSWORD"]} host={settings.DATABASES["default"]["HOST"]} port={settings.DATABASES["default"]["PORT"]}')

    cur = conn.cursor()

    return conn, cur

def create_endpoint(apps, schema_editor):
    Endpoint = apps.get_model("api", "Endpoint")

    Endpoint.objects.get_or_create(path="/api/update-gaps-status", method="POST")

    Resource = apps.get_model("api", "Resource")
    
    Resource.objects.get_or_create(name="gaps-status")

    endpoints_cluster = apps.get_model("api", "EndPointsCluster")
    endpoint = apps.get_model("api", "Endpoint")
    cluster_type = apps.get_model("api", "ClusterType")
    role = apps.get_model("api", "Role")
    resource = apps.get_model("api", "Resource")
    # READ STATIONS
    front_read_stations = endpoints_cluster(resource=resource.objects.get(name='gaps-status'),
                                            cluster_type=cluster_type.objects.get(name="read-write"), role_type='API')
    front_read_stations.save()
    front_read_stations.endpoints.add(
        endpoint.objects.get(path="/api/update-gaps-status", method="POST"))

def create_update_gaps_user(apps, schema_editor):
    
    Role = apps.get_model("api", "Role")
    User = apps.get_model("api", "User")
    EndPointsCluster = apps.get_model("api", "EndPointsCluster")
    cluster_type = apps.get_model("api", "ClusterType")
    resource = apps.get_model("api", "Resource")

    update_gaps_status_role = Role.objects.get_or_create(
        name="update-gaps-status", role_api=True, allow_all=False)[0]

    update_gaps_status_role.endpoints_clusters.add(EndPointsCluster.objects.get(resource=resource.objects.get(name='gaps-status'),
                                                                             cluster_type=cluster_type.objects.get(name="read-write"), role_type='API'))
    # !pwyCZC=E#m*7Y,
    User.objects.get_or_create(
        password="argon2$argon2id$v=19$m=102400,t=2,p=8$VWIwVFVST2xlSjBsUW9oaWlkbEpWQw$1ZTMJqOL4rZ8ty7v6Ih76UioLxCZoHAiwr4V3L1/2do",
        is_superuser=False,
        username="update-gaps-status",
        first_name="",
        last_name="",
        email="",
        is_staff=False,
        is_active=True,
        role=update_gaps_status_role
    )


def replace_station_function(apps, schema_editor):
    conn, cur = connect_to_db()

    query = """
    CREATE OR REPLACE FUNCTION delete_rows_referencing_stations() RETURNS TRIGGER AS $$
    DECLARE
	    deleted_visit_id INTEGER;
    BEGIN
    	    -- delete related rows from api tables
        DELETE FROM api_stationmetagaps WHERE station_meta_id IN (SELECT id FROM api_stationmeta WHERE station_id = OLD.api_id);
	    DELETE FROM api_stationmeta WHERE station_id = OLD.api_id; 
	    DELETE FROM api_rolepersonstation WHERE station_id = OLD.api_id;
	    DELETE FROM api_stationimages WHERE station_id = OLD.api_id;
	    DELETE FROM api_stationattachedfiles WHERE station_id = OLD.api_id;
	    
	    -- delete visits and other related rows (also from api tables)
	    DELETE FROM api_visits WHERE station_id = OLD.api_id RETURNING id INTO deleted_visit_id;
	    DELETE FROM api_visitimages WHERE visit_id = deleted_visit_id;
	    DELETE FROM api_visitattachedfiles WHERE visit_id = deleted_visit_id;
	    DELETE FROM api_visitgnssdatafiles WHERE visit_id = deleted_visit_id;
	    DELETE FROM api_visits_people WHERE visits_id = deleted_visit_id;
	    
	    -- delete from stationinfo
	    DELETE FROM stationinfo WHERE "NetworkCode" = OLD."NetworkCode" and "StationCode" = OLD."StationCode";
	    
	    -- rinex rows must not be deleted
	    
	    RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;"""

    try:
        print("Executing: ", query)
        cur.execute(query)
    except Exception as e:
        print(f"Exception when creating function. Continuing...")
        conn.rollback()
    else:
        conn.commit()
    finally:
        print("---------------------------")

    cur.close()
    conn.close()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0009_auto_20240918_1936'),
    ]

    operations = [
        migrations.RunPython(create_endpoint),
        migrations.RunPython(create_update_gaps_user),
        migrations.RunPython(replace_station_function),
    ]
