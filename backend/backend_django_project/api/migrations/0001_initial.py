# Generated by Django 5.0.4 on 2024-08-07 14:15

import api.custom_fields
import api.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models
import psycopg2

def connect_to_db():
    conn = psycopg2.connect(
        f'dbname={settings.DATABASES["default"]["NAME"]} user={settings.DATABASES["default"]["USER"]} password={settings.DATABASES["default"]["PASSWORD"]} host={settings.DATABASES["default"]["HOST"]} port={settings.DATABASES["default"]["PORT"]}')

    cur = conn.cursor()

    return conn, cur


def add_id_column(apps, schema_editor):
    """
        Add an id column to almost all tables in the database.
        Also sets column id as unique.
        This is because Django ORM cannot handle composite primary keys.
        The db will continue using the same composite primary keys but
        Django ORM will do all operations using the id column.
    """
    tables = [
        'antennas',
        'apr_coords',
        'aws_sync',
        'data_source',
        'earthquakes',
        'executions',
        'gamit_htc',
        'gamit_soln',
        'gamit_soln_excl',
        'gamit_stats',
        'gamit_subnets',
        'gamit_ztd',
        'keys',
        'locks',
        'networks',
        'ppp_soln',
        'ppp_soln_excl',
        'receivers',
        'rinex',
        'rinex_sources_info',
        'rinex_tank_struct',
        'sources_formats',
        'sources_stations',
        'stacks',
        'stationalias',
        'stationinfo',
        'stations'
    ]

    conn, cur = connect_to_db()

    for table in tables:
        try:
            query = f"ALTER TABLE {table} ADD COLUMN api_id SERIAL"
            print("Executing: ", query)
            cur.execute(query)

            query = f"ALTER TABLE {table} ADD UNIQUE(api_id)"
            print("Executing: ", query)
            cur.execute(query)
        except psycopg2.errors.DuplicateColumn:
            print(f"Table {table} already has a api_id column. Continuing...")
            conn.rollback()
        else:
            conn.commit()
        finally:
            print("---------------------------")

    cur.close()
    conn.close()

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.RunPython(add_id_column),
        migrations.CreateModel(
            name='Antennas',
            fields=[
                ('antenna_code', models.CharField(db_column='AntennaCode', max_length=22)),
                ('antenna_description', models.CharField(blank=True, db_column='AntennaDescription', null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'antennas',
                'ordering': ['antenna_code'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AprCoords',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode')),
                ('f_year', models.DecimalField(blank=True, db_column='FYear', decimal_places=50, max_digits=120, null=True)),
                ('x', models.DecimalField(blank=True, decimal_places=50, max_digits=120, null=True)),
                ('y', models.DecimalField(blank=True, decimal_places=50, max_digits=120, null=True)),
                ('z', models.DecimalField(blank=True, decimal_places=50, max_digits=120, null=True)),
                ('sn', models.DecimalField(blank=True, decimal_places=50, max_digits=120, null=True)),
                ('se', models.DecimalField(blank=True, decimal_places=50, max_digits=120, null=True)),
                ('su', models.DecimalField(blank=True, decimal_places=50, max_digits=120, null=True)),
                ('reference_frame', models.CharField(blank=True, db_column='ReferenceFrame', max_length=20, null=True)),
                ('year', models.IntegerField(db_column='Year')),
                ('doy', models.IntegerField(db_column='DOY')),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'apr_coords',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AwsSync',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode')),
                ('station_alias', models.CharField(db_column='StationAlias', max_length=4)),
                ('year', models.DecimalField(db_column='Year', decimal_places=65535, max_digits=65535)),
                ('doy', models.DecimalField(db_column='DOY', decimal_places=65535, max_digits=65535)),
                ('sync_date', models.DateTimeField(blank=True, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'aws_sync',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode', max_length=4)),
                ('try_order', models.DecimalField(decimal_places=65535, max_digits=65535)),
                ('protocol', models.CharField()),
                ('fqdn', models.CharField()),
                ('username', models.CharField(blank=True, null=True)),
                ('password', models.CharField(blank=True, null=True)),
                ('path', models.CharField(blank=True, null=True)),
                ('format', models.CharField(blank=True, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'data_source',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Earthquakes',
            fields=[
                ('date', models.DateTimeField()),
                ('lat', models.DecimalField(decimal_places=65535, max_digits=65535)),
                ('lon', models.DecimalField(decimal_places=65535, max_digits=65535)),
                ('depth', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('mag', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('strike1', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('dip1', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('rake1', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('strike2', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('dip2', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('rake2', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('id', models.CharField(blank=True, max_length=40, null=True)),
                ('location', models.CharField(blank=True, max_length=120, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'earthquakes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EtmParams',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode', max_length=4)),
                ('soln', models.CharField(max_length=10)),
                ('object', models.CharField(max_length=10)),
                ('terms', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('frequencies', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True), size=None)),
                ('jump_type', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('relaxation', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True), size=None)),
                ('year', models.DecimalField(blank=True, db_column='Year', decimal_places=50, max_digits=150, null=True)),
                ('doy', models.DecimalField(blank=True, db_column='DOY', decimal_places=50, max_digits=150, null=True)),
                ('action', models.CharField(blank=True, max_length=1, null=True)),
                ('uid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'etm_params',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Etms',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode', max_length=4)),
                ('soln', models.CharField(max_length=10)),
                ('object', models.CharField(max_length=10)),
                ('t_ref', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('jump_type', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('relaxation', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True), size=None)),
                ('frequencies', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True), size=None)),
                ('params', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True), size=None)),
                ('sigmas', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True), size=None)),
                ('metadata', models.TextField(blank=True, null=True)),
                ('hash', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('jump_date', models.DateTimeField(blank=True, null=True)),
                ('uid', models.AutoField(primary_key=True, serialize=False)),
                ('stack', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'db_table': 'etms',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('event_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('event_date', models.DateTimeField(auto_now_add=True, db_column='EventDate')),
                ('event_type', models.CharField(blank=True, db_column='EventType', max_length=6, null=True)),
                ('network_code', models.CharField(blank=True, db_column='NetworkCode', max_length=3, null=True)),
                ('station_code', models.CharField(blank=True, db_column='StationCode', max_length=4, null=True)),
                ('year', models.IntegerField(blank=True, db_column='Year', null=True)),
                ('doy', models.IntegerField(blank=True, db_column='DOY', null=True)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('stack', models.TextField(blank=True, null=True)),
                ('module', models.TextField(blank=True, null=True)),
                ('node', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'events',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Executions',
            fields=[
                ('script', models.CharField(blank=True, max_length=40, null=True)),
                ('exec_date', models.DateTimeField(blank=True, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'executions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GamitHtc',
            fields=[
                ('antenna_code', models.CharField(db_column='AntennaCode', max_length=22)),
                ('height_code', models.CharField(db_column='HeightCode', max_length=5)),
                ('v_offset', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('h_offset', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'gamit_htc',
                'ordering': ['antenna_code', 'height_code'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GamitSoln',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode', max_length=4)),
                ('project', models.CharField(db_column='Project', max_length=20)),
                ('year', models.DecimalField(db_column='Year', decimal_places=65535, max_digits=65535)),
                ('doy', models.DecimalField(db_column='DOY', decimal_places=65535, max_digits=65535)),
                ('fyear', models.DecimalField(blank=True, db_column='FYear', decimal_places=50, max_digits=150, null=True)),
                ('x', models.DecimalField(blank=True, db_column='X', decimal_places=50, max_digits=150, null=True)),
                ('y', models.DecimalField(blank=True, db_column='Y', decimal_places=50, max_digits=150, null=True)),
                ('z', models.DecimalField(blank=True, db_column='Z', decimal_places=50, max_digits=150, null=True)),
                ('sigmax', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigmay', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigmaz', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('variance_factor', models.DecimalField(blank=True, db_column='VarianceFactor', decimal_places=50, max_digits=150, null=True)),
                ('sigmaxy', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigmayz', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigmaxz', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'gamit_soln',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GamitSolnExcl',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode', max_length=4)),
                ('project', models.CharField(db_column='Project', max_length=20)),
                ('year', models.BigIntegerField(db_column='Year')),
                ('doy', models.BigIntegerField(db_column='DOY')),
                ('residual', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'gamit_soln_excl',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GamitStats',
            fields=[
                ('project', models.CharField(db_column='Project', max_length=20)),
                ('subnet', models.DecimalField(decimal_places=65535, max_digits=65535)),
                ('year', models.DecimalField(db_column='Year', decimal_places=65535, max_digits=65535)),
                ('doy', models.DecimalField(db_column='DOY', decimal_places=65535, max_digits=65535)),
                ('f_year', models.DecimalField(blank=True, db_column='FYear', decimal_places=50, max_digits=150, null=True)),
                ('wl', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('nl', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('nrms', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('relaxed_constrains', models.TextField(blank=True, null=True)),
                ('max_overconstrained', models.CharField(blank=True, max_length=8, null=True)),
                ('updated_apr', models.TextField(blank=True, null=True)),
                ('iterations', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('node', models.CharField(blank=True, max_length=50, null=True)),
                ('execution_time', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('execution_date', models.DateTimeField(blank=True, null=True)),
                ('system', models.CharField(max_length=1)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'gamit_stats',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GamitSubnets',
            fields=[
                ('project', models.CharField(db_column='Project', max_length=20)),
                ('subnet', models.DecimalField(decimal_places=65535, max_digits=65535)),
                ('year', models.DecimalField(db_column='Year', decimal_places=65535, max_digits=65535)),
                ('doy', models.DecimalField(db_column='DOY', decimal_places=65535, max_digits=65535)),
                ('centroid', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True), size=None)),
                ('stations', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), size=None)),
                ('alias', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), size=None)),
                ('ties', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), size=None)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'gamit_subnets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GamitZtd',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode', max_length=4)),
                ('date', models.DateTimeField(db_column='Date')),
                ('project', models.CharField(db_column='Project', max_length=20)),
                ('year', models.DecimalField(db_column='Year', decimal_places=65535, max_digits=65535)),
                ('doy', models.DecimalField(db_column='DOY', decimal_places=65535, max_digits=65535)),
                ('ztd', models.DecimalField(db_column='ZTD', decimal_places=65535, max_digits=65535)),
                ('model', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigma', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'gamit_ztd',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Keys',
            fields=[
                ('key_code', models.CharField(db_column='KeyCode', max_length=7)),
                ('total_chars', models.IntegerField(blank=True, db_column='TotalChars', null=True)),
                ('rinex_col_out', models.CharField(blank=True, null=True)),
                ('rinex_col_in', models.CharField(blank=True, max_length=60, null=True)),
                ('isnumeric', api.custom_fields.BitField(null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'keys',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Locks',
            fields=[
                ('filename', models.TextField()),
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(blank=True, db_column='StationCode', max_length=4, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'locks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Networks',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', unique=True)),
                ('network_name', models.CharField(blank=True, db_column='NetworkName', null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'networks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PppSoln',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode')),
                ('x', models.DecimalField(blank=True, db_column='X', decimal_places=4, max_digits=12, null=True)),
                ('y', models.DecimalField(blank=True, db_column='Y', decimal_places=4, max_digits=12, null=True)),
                ('z', models.DecimalField(blank=True, db_column='Z', decimal_places=4, max_digits=12, null=True)),
                ('year', models.DecimalField(db_column='Year', decimal_places=65535, max_digits=65535)),
                ('doy', models.DecimalField(db_column='DOY', decimal_places=65535, max_digits=65535)),
                ('reference_frame', models.CharField(db_column='ReferenceFrame', max_length=20)),
                ('sigmax', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigmay', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigmaz', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigmaxy', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigmaxz', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigmayz', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('hash', models.IntegerField(blank=True, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ppp_soln',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PppSolnExcl',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode', max_length=4)),
                ('year', models.DecimalField(db_column='Year', decimal_places=65535, max_digits=65535)),
                ('doy', models.DecimalField(db_column='DOY', decimal_places=65535, max_digits=65535)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ppp_soln_excl',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Receivers',
            fields=[
                ('receiver_code', models.CharField(db_column='ReceiverCode', max_length=22)),
                ('receiver_description', models.CharField(blank=True, db_column='ReceiverDescription', max_length=22, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'receivers',
                'ordering': ['receiver_code'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Rinex',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode')),
                ('observation_year', models.DecimalField(db_column='ObservationYear', decimal_places=50, max_digits=150)),
                ('observation_month', models.DecimalField(db_column='ObservationMonth', decimal_places=50, max_digits=150)),
                ('observation_day', models.DecimalField(db_column='ObservationDay', decimal_places=50, max_digits=150)),
                ('observation_doy', models.DecimalField(db_column='ObservationDOY', decimal_places=50, max_digits=150)),
                ('observation_f_year', models.DecimalField(db_column='ObservationFYear', decimal_places=50, max_digits=150)),
                ('observation_s_time', models.DateTimeField(blank=True, db_column='ObservationSTime', null=True)),
                ('observation_e_time', models.DateTimeField(blank=True, db_column='ObservationETime', null=True)),
                ('receiver_type', models.CharField(blank=True, db_column='ReceiverType', max_length=20, null=True)),
                ('receiver_serial', models.CharField(blank=True, db_column='ReceiverSerial', max_length=20, null=True)),
                ('receiver_fw', models.CharField(blank=True, db_column='ReceiverFw', max_length=20, null=True)),
                ('antenna_type', models.CharField(blank=True, db_column='AntennaType', max_length=20, null=True)),
                ('antenna_serial', models.CharField(blank=True, db_column='AntennaSerial', max_length=20, null=True)),
                ('antenna_dome', models.CharField(blank=True, db_column='AntennaDome', max_length=20, null=True)),
                ('filename', models.CharField(blank=True, db_column='Filename', max_length=50, null=True)),
                ('interval', models.DecimalField(db_column='Interval', decimal_places=50, max_digits=150)),
                ('antenna_offset', models.DecimalField(blank=True, db_column='AntennaOffset', decimal_places=50, max_digits=150, null=True)),
                ('completion', models.DecimalField(db_column='Completion', decimal_places=3, max_digits=7)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'rinex',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RinexSourcesInfo',
            fields=[
                ('name', models.CharField(max_length=20)),
                ('fqdn', models.CharField()),
                ('protocol', models.CharField()),
                ('username', models.CharField(blank=True, null=True)),
                ('password', models.CharField(blank=True, null=True)),
                ('path', models.CharField(blank=True, null=True)),
                ('format', models.CharField(blank=True, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'rinex_sources_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RinexTankStruct',
            fields=[
                ('level', models.IntegerField(db_column='Level')),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'rinex_tank_struct',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SourcesFormats',
            fields=[
                ('format', models.CharField()),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'sources_formats',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SourcesServers',
            fields=[
                ('server_id', models.AutoField(primary_key=True, serialize=False)),
                ('protocol', models.CharField()),
                ('fqdn', models.CharField()),
                ('username', models.CharField(blank=True, null=True)),
                ('password', models.CharField(blank=True, null=True)),
                ('path', models.CharField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sources_servers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SourcesStations',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode', max_length=4)),
                ('try_order', models.SmallIntegerField()),
                ('path', models.CharField(blank=True, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'sources_stations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stacks',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode', max_length=4)),
                ('project', models.CharField(db_column='Project', max_length=20)),
                ('year', models.DecimalField(db_column='Year', decimal_places=65535, max_digits=65535)),
                ('doy', models.DecimalField(db_column='DOY', decimal_places=65535, max_digits=65535)),
                ('f_year', models.DecimalField(blank=True, db_column='FYear', decimal_places=50, max_digits=150, null=True)),
                ('x', models.DecimalField(blank=True, db_column='X', decimal_places=50, max_digits=150, null=True)),
                ('y', models.DecimalField(blank=True, db_column='Y', decimal_places=50, max_digits=150, null=True)),
                ('z', models.DecimalField(blank=True, db_column='Z', decimal_places=50, max_digits=150, null=True)),
                ('sigmax', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigmay', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigmaz', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('variance_factor', models.DecimalField(blank=True, db_column='VarianceFactor', decimal_places=50, max_digits=150, null=True)),
                ('sigmaxy', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigmayz', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('sigmaxz', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('name', models.CharField(max_length=20)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'stacks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stationalias',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode', max_length=4)),
                ('station_alias', models.CharField(db_column='StationAlias', max_length=4, unique=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'stationalias',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stationinfo',
            fields=[
                ('network_code', models.CharField(db_column='NetworkCode', max_length=3)),
                ('station_code', models.CharField(db_column='StationCode', max_length=4)),
                ('receiver_code', models.CharField(db_column='ReceiverCode', max_length=22)),
                ('receiver_serial', models.CharField(blank=True, db_column='ReceiverSerial', max_length=22, null=True)),
                ('receiver_firmware', models.CharField(blank=True, db_column='ReceiverFirmware', max_length=10, null=True)),
                ('antenna_code', models.CharField(db_column='AntennaCode', max_length=22)),
                ('antenna_serial', models.CharField(blank=True, db_column='AntennaSerial', max_length=20, null=True)),
                ('antenna_height', models.DecimalField(blank=True, db_column='AntennaHeight', decimal_places=4, max_digits=6, null=True)),
                ('antenna_north', models.DecimalField(blank=True, db_column='AntennaNorth', decimal_places=4, max_digits=12, null=True)),
                ('antenna_east', models.DecimalField(blank=True, db_column='AntennaEast', decimal_places=4, max_digits=12, null=True)),
                ('height_code', models.CharField(db_column='HeightCode')),
                ('radome_code', models.CharField(db_column='RadomeCode', max_length=7)),
                ('date_start', models.DateTimeField(db_column='DateStart')),
                ('date_end', models.DateTimeField(blank=True, db_column='DateEnd', null=True)),
                ('receiver_vers', models.CharField(blank=True, db_column='ReceiverVers', max_length=22, null=True)),
                ('comments', models.TextField(blank=True, db_column='Comments', null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'stationinfo',
                'ordering': ['date_start'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stations',
            fields=[
                ('station_code', models.CharField(db_column='StationCode', max_length=4)),
                ('station_name', models.CharField(blank=True, db_column='StationName', max_length=40, null=True)),
                ('date_start', models.DecimalField(blank=True, db_column='DateStart', decimal_places=3, max_digits=7, null=True)),
                ('date_end', models.DecimalField(blank=True, db_column='DateEnd', decimal_places=3, max_digits=7, null=True)),
                ('auto_x', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('auto_y', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('auto_z', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('harpos_coeff_otl', models.TextField(blank=True, db_column='Harpos_coeff_otl', null=True)),
                ('lat', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('lon', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('max_dist', models.DecimalField(blank=True, decimal_places=50, max_digits=150, null=True)),
                ('dome', models.CharField(blank=True, max_length=9, null=True)),
                ('country_code', models.CharField(blank=True, max_length=3, null=True)),
                ('marker', models.IntegerField(blank=True, null=True)),
                ('api_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'stations',
                'ordering': ['api_id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Campaigns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='ClusterType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('two_digits_code', models.CharField(max_length=2, unique=True)),
                ('three_digits_code', models.CharField(max_length=3, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Endpoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('DELETE', 'DELETE'), ('PATCH', 'PATCH'), ('ALL', 'ALL')], max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='EndPointsCluster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='MonumentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('photo_path', models.ImageField(blank=True, upload_to='monument_type_photos/')),
            ],
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(blank=True, max_length=100)),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('address', models.CharField(blank=True, max_length=100)),
                ('photo', models.ImageField(blank=True, upload_to='person_photos/')),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('role_api', models.BooleanField()),
                ('allow_all', models.BooleanField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='RolePersonStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='StationAttachedFiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=api.models.station_attached_files_path)),
                ('filename', models.CharField(blank=True, max_length=100)),
                ('description', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='StationImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=api.models.station_images_path)),
                ('description', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='StationMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remote_access_link', models.URLField(blank=True)),
                ('has_battery', models.BooleanField(default=False)),
                ('battery_description', models.CharField(blank=True, max_length=100)),
                ('has_communications', models.BooleanField(default=False)),
                ('communications_description', models.CharField(blank=True, max_length=100)),
                ('comments', models.CharField(blank=True)),
                ('navigation_file', models.FileField(blank=True, upload_to=api.models.station_navigation_file_path)),
                ('navigation_filename', models.CharField(blank=True, max_length=100)),
                ('has_gaps', models.BooleanField(default=False)),
                ('has_gaps_last_update_datetime', models.DateTimeField(blank=True, null=True)),
                ('has_gaps_update_needed', models.BooleanField(default=True)),
                ('has_stationinfo', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='StationRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='StationStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='StationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='VisitAttachedFiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=api.models.visits_attached_files_path)),
                ('filename', models.CharField(blank=True, max_length=100)),
                ('description', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='VisitGNSSDataFiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=api.models.visits_gnss_data_files_path)),
                ('filename', models.CharField(blank=True, max_length=100)),
                ('description', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='VisitImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=api.models.visits_images_path)),
                ('description', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Visits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('log_sheet_file', models.FileField(blank=True, upload_to=api.models.visits_log_sheet_file_path)),
                ('log_sheet_filename', models.CharField(blank=True, max_length=100)),
                ('navigation_file', models.FileField(blank=True, upload_to=api.models.visits_navigation_file_path)),
                ('navigation_filename', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('address', models.CharField(blank=True, max_length=100)),
                ('photo', models.ImageField(blank=True, upload_to='user_photos/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='endpoint',
            constraint=models.UniqueConstraint(fields=('path', 'method'), name='path_method_unique'),
        ),
        migrations.AddField(
            model_name='endpointscluster',
            name='cluster_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.clustertype'),
        ),
        migrations.AddField(
            model_name='endpointscluster',
            name='endpoints',
            field=models.ManyToManyField(to='api.endpoint'),
        ),
        migrations.AddField(
            model_name='page',
            name='endpoints_clusters',
            field=models.ManyToManyField(to='api.endpointscluster'),
        ),
        migrations.AddField(
            model_name='person',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='campaigns',
            name='people',
            field=models.ManyToManyField(to='api.person'),
        ),
        migrations.AddField(
            model_name='endpointscluster',
            name='resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.resource'),
        ),
        migrations.AddField(
            model_name='role',
            name='endpoints_clusters',
            field=models.ManyToManyField(blank=True, to='api.endpointscluster'),
        ),
        migrations.AddField(
            model_name='role',
            name='pages',
            field=models.ManyToManyField(blank=True, to='api.page'),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.role'),
        ),
        migrations.AddField(
            model_name='rolepersonstation',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.person'),
        ),
        migrations.AddField(
            model_name='rolepersonstation',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.stations'),
        ),
        migrations.AddField(
            model_name='stationattachedfiles',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.stations'),
        ),
        migrations.AddField(
            model_name='stationimages',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.stations'),
        ),
        migrations.AddField(
            model_name='stationmeta',
            name='monument_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.monumenttype'),
        ),
        migrations.AddField(
            model_name='stationmeta',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.stations'),
        ),
        migrations.AddField(
            model_name='rolepersonstation',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.stationrole'),
        ),
        migrations.AddField(
            model_name='stationmeta',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.stationstatus'),
        ),
        migrations.AddField(
            model_name='stationmeta',
            name='station_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.stationtype'),
        ),
        migrations.AddField(
            model_name='visits',
            name='campaign',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.campaigns'),
        ),
        migrations.AddField(
            model_name='visits',
            name='people',
            field=models.ManyToManyField(blank=True, to='api.person'),
        ),
        migrations.AddField(
            model_name='visits',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.stations'),
        ),
        migrations.AddField(
            model_name='visitimages',
            name='visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.visits'),
        ),
        migrations.AddField(
            model_name='visitgnssdatafiles',
            name='visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.visits'),
        ),
        migrations.AddField(
            model_name='visitattachedfiles',
            name='visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.visits'),
        ),
        migrations.AddConstraint(
            model_name='endpointscluster',
            constraint=models.UniqueConstraint(fields=('resource', 'cluster_type', 'description'), name='resource_cluster_type_description_unique'),
        ),
        migrations.AddConstraint(
            model_name='rolepersonstation',
            constraint=models.UniqueConstraint(fields=('role', 'person', 'station'), name='role_person_station_unique'),
        ),
        migrations.AddConstraint(
            model_name='stationmeta',
            constraint=models.UniqueConstraint(fields=('station',), name='station_unique'),
        ),
        migrations.AddConstraint(
            model_name='visits',
            constraint=models.UniqueConstraint(fields=('station', 'date'), name='station_date_unique'),
        ),
    ]
